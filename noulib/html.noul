h1 := freeze \...args -> HtmlTag("h1", ...args);
h2 := freeze \...args -> HtmlTag("h2", ...args);
h3 := freeze \...args -> HtmlTag("h3", ...args);
h4 := freeze \...args -> HtmlTag("h4", ...args);
h5 := freeze \...args -> HtmlTag("h5", ...args);
h6 := freeze \...args -> HtmlTag("h6", ...args);
em := freeze \...args -> HtmlTag("em", ...args);
strong := freeze \...args -> HtmlTag("strong", ...args);
hr := freeze \...args -> HtmlTag("hr", ...args);
code := freeze \...args -> HtmlTag("code", ...args);
div := freeze \...args -> HtmlTag("div", ...args);
span := freeze \...args -> HtmlTag("span", ...args);
p := freeze \...args -> HtmlTag("p", ...args);

table := freeze \...args -> HtmlTag("table", ...args);
td := freeze \...args -> HtmlTag("td", ...args);
th := freeze \...args -> HtmlTag("th", ...args);
tr := freeze \...args -> HtmlTag("tr", ...args);
button := freeze \...args -> HtmlTag("button", ...args);
input_text := freeze \...args -> HtmlTag("input:text", ...args);
input_number := freeze \...args -> HtmlTag("input:number", ...args);
input_range := freeze \...args -> HtmlTag("input:range", ...args);
input_checkbox := freeze \...args -> HtmlTag("input:checkbox", ...args);
checkbox := input_checkbox;
slider := input_range;
select := freeze \...args -> HtmlTag("select", ...args);

svg := freeze \...args -> HtmlTag("svg:svg", args);
circle := freeze \arg -> HtmlTag("svg:circle", [], arg);
line := freeze \arg -> HtmlTag("svg:line", [], arg);
rect := freeze \arg -> HtmlTag("svg:rect", [], arg);

simple_counter := 0;
display_simple := \displayable -> (
	simple_counter += 1;
	display(displayable, F"simple-{simple_counter}")
);
empty_to_null := \switch case "" -> null case x -> x;
simple_button := freeze \...args -> display_simple(button(...args)) coalesce false;
simple_text := freeze \...args -> display_simple(input_text(...args)) coalesce args !? 0 coalesce "";
simple_number := freeze \...args -> empty_to_null(display_simple(input_number(...args))) coalesce args !? 0 coalesce 0.0;
simple_int := freeze \...args -> int(simple_number(...args));
simple_range := freeze \...args -> display_simple(input_range(...args)) coalesce args !? 0 coalesce 0;
simple_slider := simple_range;
simple_checkbox := freeze \...args -> display_simple(input_checkbox(...args)) coalesce args !? 0 coalesce false;
simple_select := freeze \...args -> display_simple(select(...args)) coalesce args !? 0 !? 0;

colorify := freeze \switch
	case [r, g, b]: vector -> F"rgb({r},{g},{b})"
	case [r, g, b, a]: vector -> F"rgba({r},{g},{b},{a})"
	case x -> x;

colored := freeze \tag, color -> (
	if (tag is HtmlTag) (
		tag[html_tag_attributes] = (tag[html_tag_attributes] or {}){"style:color" = colorify color};
		tag
	) else (
		span(tag, {"style:color": color})
	)
);
bgColored := freeze \tag, color -> (
	if (tag is HtmlTag) (
		tag[html_tag_attributes] = (tag[html_tag_attributes] or {}){"style:backgroundColor" = colorify color};
		tag
	) else (
		span(tag, {"style:backgroundColor": colorify color})
	)
);

tableOf := freeze \data -> table(
	for (row <- data) yield tr(
		for (cell <- row) yield switch (cell)
			case args: list -> td(...cell)
			case v: vector -> td() bgColored v
			case f: func -> f(td()) # maybe colored or something
			case cell -> td(cell)
	)
);
